@inject TaskPro.Models.TaskProDbContext _context
@using System.Security.Claims
@using TaskPro.Helper
@{
    var currentDate = DateTime.UtcNow.Date;
    var username = string.Empty;
    var userRole = string.Empty;
    var userId = string.Empty;
    @if (User.Identity.IsAuthenticated)
    {
        userRole = User.Claims.Where(s => s.Type is "role" or ClaimTypes.Role).FirstOrDefault()?.Value;
        username = User.FindFirst(ClaimTypes.GivenName)?.Value;
        userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

    }
    var notifications = new List<TaskPro.Models.Notification>();
    if (!string.IsNullOrEmpty(userId))
    {
        notifications = _context.Notifications
            .Where(n => n.UserId == userId)
            .OrderByDescending(n => n.CreatedAt)
            .Take(5)
            .ToList();
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"] - Member Dashboard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="/css/StyleSheet1.css" rel="stylesheet">
 
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="@Url.Action("Index", "Member")">
                TaskPro
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#memberNav" aria-controls="memberNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="memberNav">
                <ul class="navbar-nav ml-auto align-items-center">
                    <!-- Notifications -->
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="notifDropdown"
                           role="button" data-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-bell fa-lg"></i>
                            @if (notifications.Any(n => n.CreatedAt.Value.Date == currentDate.Date))
                            {
                                <span class="badge badge-danger badge-sm ml-1">New</span>
                            }
                        </a>
                        <div class="dropdown-menu dropdown-menu-right shadow-lg" aria-labelledby="notifDropdown">
                            @if (!notifications.Any())
                            {
                                <span class="dropdown-item text-muted">No new notifications</span>
                            }
                            else
                            {
                                @foreach (var notif in notifications)
                                {
                                    if (notif.IsRead.Value)
                                    {
                                        <a class="dropdown-item text-muted small" href="#">
                                            @notif.Message
                                            <br />
                                            <small class="text-muted">@notif.CreatedAt?.ToString("g")</small>
                                        </a>
                                    }
                                    else
                                    {
                                        <a class="dropdown-item font-weight-bold small" href="javascript:void(0)"
                                           onclick="markAsRead(@notif.Id)">
                                            @notif.Message
                                            <br />
                                            <small class="text-muted">@notif.CreatedAt?.ToString("g")</small>
                                        </a>
                                        <form id="antiForgeryForm">
                                            @Html.AntiForgeryToken()
                                        </form>
                                    }
                                }
                                @if (notifications.Count >= 5)
                                {
                                    <div class="dropdown-divider"></div>
                                    <a class="dropdown-item text-primary" href="javascript:void(0)" onclick="openNotificationsModal()">
                                        View All Notifications
                                    </a>
                                }
                            }
                        </div>
                    </li>

                    <!-- User -->
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="userDropdown" role="button" data-toggle="dropdown" aria-expanded="false">
                            <img src="/Admin/default-avatar1.png" alt="User Avatar" class="user-avatar" />
                            <div class="d-flex flex-column ms-2">
                                <span>@username</span>
                                <small style="font-size: 0.75rem;">@userRole</small>
                            </div>
                        </a>
                        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="userDropdown">
                            <form asp-controller="Home" asp-action="Logout" method="post" class="d-inline">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="dropdown-item">Logout</button>
                            </form>
                        </div>
                    </li>
                </ul>
            </div>

        </div>
    </nav>
    <div class="modal right fade" id="allNotificationsModal" tabindex="-1" role="dialog" aria-labelledby="allNotificationsLabel">
        <div class="modal-dialog" role="document" style="max-width: 400px; margin: 0; height: 100%; right: 0; position: fixed;">
            <div class="modal-content" style="height: 100%;">
                <div class="modal-header">
                    <h5 class="modal-title">All Notifications</h5>
                  @*   <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button> *@
                </div>
                <div class="modal-body" id="allNotificationsList">
                    <!-- Will be filled dynamically -->
                </div>
            </div>
        </div>
    </div>
    <main class="container-fluid mt-4">
        @RenderBody()
    </main>

    <footer>
        &copy; @DateTime.Now.Year - TaskPro | Member Dashboard
    </footer>
    <script>
                  function markAsRead(notificationId) {
            fetch('/Member/MarkAsReadAsync', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: 'notificationId=' + encodeURIComponent(notificationId)
            })
            .then(res => {
                if (res.ok) {
                    location.reload();
                }
            })
            .catch(err => console.error('Error:', err));
        }

            function openNotificationsModal() {
            fetch('/Home/GetAllNotifications') // you'll make this action
                .then(response => response.json())
                .then(data => {
                    let container = document.getElementById("allNotificationsList");
                    container.innerHTML = "";

                    if (data.length === 0) {
                        container.innerHTML = "<p class='text-muted'>No notifications found.</p>";
                    } else {
                        data.forEach(n => {
                            let item = document.createElement("div");
                            item.className = "mb-2 p-2 border-bottom";
                            item.innerHTML = `<div class="${n.isRead ? 'text-muted small' : 'font-weight-bold small'}">${n.message}</div>
                                                   <small class="text-muted">
                                                    ${new Date(n.createdAt).toLocaleString('en-US', {
                                                        month: 'short',
                                                        day: '2-digit',
                                                        year: 'numeric',
                                                        hour: '2-digit',
                                                        minute: '2-digit'
                                                    })}</small>`;
                            container.appendChild(item);
                        });
                    }

                    $('#allNotificationsModal').modal('show');
                });
        }
    </script>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
